{"version":3,"file":"bundle.3c2fb6bfda5f2edf242b.worker.js","mappings":"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","sources":["webpack://tower-defense/./node_modules/heap/index.js","webpack://tower-defense/./node_modules/heap/lib/heap.js","webpack://tower-defense/webpack/bootstrap","webpack://tower-defense/webpack/runtime/compat get default export","webpack://tower-defense/webpack/runtime/define property getters","webpack://tower-defense/webpack/runtime/hasOwnProperty shorthand","webpack://tower-defense/./src/types/navigator.ts","webpack://tower-defense/./src/types/game.ts","webpack://tower-defense/./src/lib/utils.ts","webpack://tower-defense/./src/lib/navigator/tools.ts","webpack://tower-defense/./src/const/game.ts","webpack://tower-defense/./src/lib/navigator/node.ts","webpack://tower-defense/./src/lib/navigator/task.ts","webpack://tower-defense/./src/lib/navigator/worker.ts","webpack://tower-defense/./src/lib/navigator/process.ts"],"sourcesContent":["module.exports = require('./lib/heap');\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export var NavigatorEvent;\n(function (NavigatorEvent) {\n    NavigatorEvent[\"CREATE_TASK\"] = \"create_task\";\n    NavigatorEvent[\"COMPLETE_TASK\"] = \"complete_task\";\n    NavigatorEvent[\"CANCEL_TASK\"] = \"cancel_task\";\n    NavigatorEvent[\"UPDATE_POINTS_COST\"] = \"update_points_cost\";\n})(NavigatorEvent || (NavigatorEvent = {}));\n","export var GameAdType;\n(function (GameAdType) {\n    GameAdType[\"MIDGAME\"] = \"midgame\";\n    GameAdType[\"REWARDED\"] = \"rewarded\";\n})(GameAdType || (GameAdType = {}));\nexport var GameScene;\n(function (GameScene) {\n    GameScene[\"SYSTEM\"] = \"SYSTEM\";\n    GameScene[\"GAMEOVER\"] = \"GAMEOVER\";\n    GameScene[\"WORLD\"] = \"WORLD\";\n    GameScene[\"SCREEN\"] = \"SCREEN\";\n    GameScene[\"MENU\"] = \"MENU\";\n})(GameScene || (GameScene = {}));\nexport var GameEvents;\n(function (GameEvents) {\n    GameEvents[\"START\"] = \"start\";\n    GameEvents[\"FINISH\"] = \"finish\";\n    GameEvents[\"UPDATE_SETTINGS\"] = \"update_settings\";\n})(GameEvents || (GameEvents = {}));\nexport var GameSettings;\n(function (GameSettings) {\n    GameSettings[\"AUDIO\"] = \"AUDIO\";\n    GameSettings[\"EFFECTS\"] = \"EFFECTS\";\n    GameSettings[\"TUTORIAL\"] = \"TUTORIAL\";\n})(GameSettings || (GameSettings = {}));\nexport var GameDifficulty;\n(function (GameDifficulty) {\n    GameDifficulty[\"EASY\"] = \"EASY\";\n    GameDifficulty[\"NORMAL\"] = \"NORMAL\";\n    GameDifficulty[\"HARD\"] = \"HARD\";\n})(GameDifficulty || (GameDifficulty = {}));\nexport var GameFlag;\n(function (GameFlag) {\n    GameFlag[\"NO_BLOOD\"] = \"NO_BLOOD\";\n    GameFlag[\"ADS\"] = \"ADS\";\n})(GameFlag || (GameFlag = {}));\n","import { MIN_VALID_SCREEN_SIZE } from \"@const/game\";\n/**\n * Check positions is equals.\n * @param a - First position\n * @param b - Second position\n */\nexport function equalPositions(a, b) {\n    if (\"z\" in a) {\n        if (\"z\" in b) {\n            return a.x === b.x && a.y === b.y && a.z === b.z;\n        }\n        return false;\n    }\n    return a.x === b.x && a.y === b.y;\n}\n/**\n * Remove target position from positions list.\n * @param positions - Positions list\n * @param target - Target position\n */\nexport function excludePosition(positions, target) {\n    const index = positions.findIndex((position) => equalPositions(position, target));\n    if (index !== -1) {\n        positions.splice(index, 1);\n    }\n}\n/**\n * Format timestamp to string time.\n * @param value - Timestamp in miliseconds\n */\nexport function formatTime(value) {\n    const m = Math.floor(value / 1000 / 60);\n    const s = Math.ceil(value / 1000) % 60;\n    return `${m < 10 ? \"0\" : \"\"}${m}:${s < 10 ? \"0\" : \"\"}${s}`;\n}\n/**\n * Get closest position to target.\n * @param positions - Positions list\n * @param target - Target position\n */\nexport function getClosest(positions, target) {\n    let closest = {\n        distance: Infinity,\n        position: null,\n    };\n    positions.forEach((position) => {\n        const dx = position.x - target.x;\n        const dy = position.y - target.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance < closest.distance) {\n            closest = { position, distance };\n        }\n    });\n    return closest.position;\n}\n/**\n * Sort position by distance to target.\n * @param positions - Positions list\n * @param target - Target position\n */\nexport function sortByDistance(positions, target) {\n    let meta = positions.map((position) => ({\n        position,\n        distance: Phaser.Math.Distance.BetweenPoints(target, position),\n    }));\n    meta = meta.sort((a, b) => a.distance - b.distance);\n    return meta.map(({ position }) => position);\n}\n/**\n * Get array of positions around source position.\n * @param position - Source position\n */\nexport function aroundPosition(position) {\n    const list = [];\n    for (let y = position.y - 1; y <= position.y + 1; y++) {\n        for (let x = position.x - 1; x <= position.x + 1; x++) {\n            if (!equalPositions({ x, y }, position)) {\n                list.push({ x, y });\n            }\n        }\n    }\n    return list;\n}\n/**\n * Add sign to amount.\n * @param value - Amount\n */\nexport function formatAmount(value) {\n    return `${value > 0 ? \"+\" : \"\"}${value}`;\n}\n/**\n * Remove sign from amount.\n * @param value - Amount\n */\nexport function rawAmount(value) {\n    return Number(value.replace(\"+\", \"\"));\n}\n/**\n * Get stage of period.\n * @param start - Start value\n * @param current - Current value\n */\nexport function getStage(start, current) {\n    let stage = 0;\n    let next = start;\n    for (let i = 1; i <= current; i++) {\n        if (i === next) {\n            stage++;\n            next = i + stage;\n        }\n    }\n    return stage;\n}\n/**\n * Get all points on matrix between two given points.\n * @param beg - Start position\n * @param end - End posotion\n */\nexport function interpolate(beg, end) {\n    const line = [];\n    const current = Object.assign({}, beg);\n    const dx = Math.abs(end.x - beg.x);\n    const dy = Math.abs(end.y - beg.y);\n    const sx = beg.x < end.x ? 1 : -1;\n    const sy = beg.y < end.y ? 1 : -1;\n    let err = dx - dy;\n    let shift;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        line.push(Object.assign({}, current));\n        if (equalPositions(current, end)) {\n            break;\n        }\n        shift = 2 * err;\n        if (shift > -dy) {\n            err -= dy;\n            current.x += sx;\n        }\n        if (shift < dx) {\n            err += dx;\n            current.y += sy;\n        }\n    }\n    return line;\n}\n/**\n * Call function with frequency limit.\n * @param fn - Function\n * @param delay - Call delay\n */\nexport function debounce(fn, delay) {\n    let timeout = null;\n    return {\n        call(...args) {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(() => {\n                fn.apply(this, args);\n                timeout = null;\n            }, delay);\n        },\n        reject() {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n        },\n    };\n}\n/**\n * Each object entries.\n * @param obj - Object\n * @param callback - Callback\n */\nexport function eachEntries(obj, callback) {\n    Object.entries(obj).forEach(([key, value], index) => {\n        callback(key, value, index);\n    });\n}\n/**\n * Map object entries.\n * @param obj - Object\n * @param callback - Callback\n */\nexport function mapEntries(obj, callback) {\n    return Object.entries(obj).map(([key, value], index) => callback(key, value, index));\n}\n/**\n * Check device screen size.\n */\nexport function isValidScreenSize() {\n    return (window.innerWidth >= MIN_VALID_SCREEN_SIZE[0] &&\n        window.innerHeight >= MIN_VALID_SCREEN_SIZE[1]);\n}\n/**\n * Check device OS.\n */\nexport function isMobileDevice() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n/**\n * Add script to document.\n * @param url - Script src\n */\nexport function registerScript(url) {\n    return new Promise((resolve, reject) => {\n        const script = document.createElement(\"script\");\n        script.setAttribute(\"src\", url);\n        script.addEventListener(\"load\", resolve);\n        script.addEventListener(\"error\", reject);\n        document.body.appendChild(script);\n    });\n}\n","import { eachEntries } from \"@lib/utils\";\nexport function getDistance(point1, point2) {\n    const a = point2.x - point1.x;\n    const b = point2.y - point1.y;\n    const distance = Math.sqrt(a * a + b * b);\n    return distance;\n}\nexport function getCost(currentNode, shift, points) {\n    var _a, _b, _c, _d, _e, _f;\n    const position = {\n        x: currentNode.x + shift.x,\n        y: currentNode.y + shift.y,\n    };\n    const cost = (_b = (_a = points[position.y]) === null || _a === void 0 ? void 0 : _a[position.x]) !== null && _b !== void 0 ? _b : 1.0;\n    const isDiagonal = Math.abs(shift.x) + Math.abs(shift.y) !== 1;\n    if (isDiagonal) {\n        return (cost * Math.SQRT2 +\n            ((_d = (_c = points[currentNode.y]) === null || _c === void 0 ? void 0 : _c[position.x]) !== null && _d !== void 0 ? _d : 0.0) +\n            ((_f = (_e = points[position.y]) === null || _e === void 0 ? void 0 : _e[currentNode.x]) !== null && _f !== void 0 ? _f : 0.0));\n    }\n    return cost;\n}\nexport function getDirections(grid, currentNode) {\n    const straightFlags = {};\n    const straightDirs = {\n        R: { x: 1, y: 0 },\n        L: { x: -1, y: 0 },\n        D: { x: 0, y: 1 },\n        U: { x: 0, y: -1 }, // ↑\n    };\n    const diagonalDirs = {\n        RD: { x: 1, y: 1 },\n        RU: { x: 1, y: -1 },\n        LU: { x: -1, y: -1 },\n        LD: { x: -1, y: 1 }, // ↙\n    };\n    const allowedDirs = [];\n    eachEntries(straightDirs, (key, dir) => {\n        var _a;\n        const x = currentNode.x + dir.x;\n        const y = currentNode.y + dir.y;\n        if (((_a = grid[y]) === null || _a === void 0 ? void 0 : _a[x]) === false) {\n            straightFlags[key] = true;\n            allowedDirs.push(dir);\n        }\n    });\n    eachEntries(diagonalDirs, (key, dir) => {\n        var _a;\n        const dontCross = key.split(\"\").every((flag) => straightFlags[flag]);\n        const x = currentNode.x + dir.x;\n        const y = currentNode.y + dir.y;\n        if (dontCross && ((_a = grid[y]) === null || _a === void 0 ? void 0 : _a[x]) === false) {\n            allowedDirs.push(dir);\n        }\n    });\n    return allowedDirs;\n}\n","import { GameSettings } from \"@type/game\";\nexport const CONTAINER_ID = \"game-container\";\nexport const AUDIO_VOLUME = 0.1;\nexport const MIN_VALID_SCREEN_SIZE = [800, 480];\nexport const DEBUG_MODS = {\n    basic: false,\n    position: false,\n    path: false,\n};\nexport const SETTINGS = {\n    [GameSettings.TUTORIAL]: {\n        description: \"Tutorial\",\n        values: [\"on\", \"off\"],\n        default: \"on\",\n    },\n    [GameSettings.AUDIO]: {\n        description: \"Audio\",\n        values: [\"on\", \"off\"],\n        default: \"on\",\n    },\n    [GameSettings.EFFECTS]: {\n        description: \"Effects\",\n        values: [\"on\", \"off\"],\n        default: \"on\",\n    },\n};\n","export class PathNode {\n    constructor(parent, { position, cost = 1.0, distance }) {\n        this.listOpened = null;\n        this.x = position.x;\n        this.y = position.y;\n        this.distance = distance;\n        this.cost = cost;\n        this.parent = parent;\n    }\n    bestGuessDistance() {\n        return this.cost + this.distance;\n    }\n    getCost() {\n        return this.cost;\n    }\n    setCost(cost) {\n        this.cost = cost;\n    }\n    getParent() {\n        return this.parent;\n    }\n    setParent(parent) {\n        this.parent = parent;\n    }\n    isNewList() {\n        return this.listOpened === null;\n    }\n    isListOpened() {\n        return this.listOpened === true;\n    }\n    openList() {\n        this.listOpened = true;\n    }\n    closeList() {\n        this.listOpened = false;\n    }\n    getPath() {\n        const path = [\n            {\n                x: this.x,\n                y: this.y,\n            },\n        ];\n        let parent = this.getParent();\n        while (parent) {\n            path.push({\n                x: parent.x,\n                y: parent.y,\n            });\n            parent = parent.getParent();\n        }\n        path.reverse();\n        return path;\n    }\n}\n","/* eslint-disable no-restricted-globals */\nimport Heap from \"heap\";\nimport { equalPositions } from \"@lib/utils\";\nimport { NavigatorEvent } from \"@type/navigator\";\nimport { PathNode } from \"./node\";\nimport { getCost, getDistance } from \"./tools\";\nexport class NavigatorTask {\n    constructor({ id, from, to, grid, compress = false }) {\n        this.tree = [];\n        this.compress = false;\n        this.id = id;\n        this.from = from;\n        this.to = to;\n        this.grid = grid;\n        this.compress = compress;\n        this.nodes = new Heap((nodeA, nodeB) => nodeA.bestGuessDistance() - nodeB.bestGuessDistance());\n        const node = new PathNode(null, {\n            position: from,\n            distance: getDistance(from, to),\n        });\n        this.addNode(node);\n    }\n    takeLastNode() {\n        var _a;\n        return (_a = this.nodes.pop()) !== null && _a !== void 0 ? _a : null;\n    }\n    addNode(node) {\n        this.nodes.push(node);\n        if (!this.tree[node.y]) {\n            this.tree[node.y] = [];\n        }\n        this.tree[node.y][node.x] = node;\n    }\n    pickNode(position) {\n        var _a;\n        return (_a = this.tree[position.y]) === null || _a === void 0 ? void 0 : _a[position.x];\n    }\n    upNode(node) {\n        this.nodes.updateItem(node);\n    }\n    failure() {\n        self.postMessage({\n            event: NavigatorEvent.COMPLETE_TASK,\n            payload: {\n                id: this.id,\n                path: null,\n            },\n        });\n    }\n    complete(node) {\n        let path = node.getPath();\n        if (this.compress) {\n            path = NavigatorTask.CompressPath(path);\n        }\n        self.postMessage({\n            event: NavigatorEvent.COMPLETE_TASK,\n            payload: {\n                id: this.id,\n                path,\n            },\n        });\n    }\n    checkAdjacentNode(currentNode, shift, points) {\n        const position = {\n            x: currentNode.x + shift.x,\n            y: currentNode.y + shift.y,\n        };\n        const cost = currentNode.getCost() + getCost(currentNode, shift, points);\n        const existNode = this.pickNode(position);\n        if (existNode) {\n            if (cost < existNode.getCost()) {\n                existNode.setCost(cost);\n                existNode.setParent(currentNode);\n                this.upNode(existNode);\n            }\n        }\n        else {\n            const node = new PathNode(currentNode, {\n                position,\n                cost,\n                distance: getDistance(position, this.to),\n            });\n            node.openList();\n            this.addNode(node);\n        }\n    }\n    static CompressPath(path) {\n        if (path.length < 3) {\n            return path;\n        }\n        const compressed = [];\n        const beg = Object.assign({}, path[0]);\n        let next = Object.assign({}, path[1]);\n        let dir = { x: 0, y: 0 };\n        dir = NavigatorTask.GetDirection(next, beg);\n        compressed.push(beg);\n        for (let i = 2; i < path.length; i++) {\n            const current = Object.assign({}, next);\n            const prevDir = Object.assign({}, dir);\n            next = Object.assign({}, path[i]);\n            dir = NavigatorTask.GetDirection(next, current);\n            if (!equalPositions(dir, prevDir)) {\n                compressed.push(current);\n            }\n        }\n        compressed.push(next);\n        return compressed;\n    }\n    static GetDirection(from, to) {\n        const result = {\n            x: from.x - to.x,\n            y: from.y - to.y,\n        };\n        const sqrt = Math.sqrt(Math.pow(result.x, 2) + Math.pow(result.y, 2));\n        result.x /= sqrt;\n        result.y /= sqrt;\n        return result;\n    }\n}\n","/* eslint-disable no-restricted-globals */\n/* eslint-disable no-case-declarations */\nimport { NavigatorEvent } from \"@type/navigator\";\nimport { NavigatorProcess } from \"./process\";\nimport { NavigatorTask } from \"./task\";\nconst navigatorProcess = new NavigatorProcess();\nsetInterval(() => {\n    navigatorProcess.processing();\n}, 100);\nself.onmessage = ({ data }) => {\n    switch (data.event) {\n        case NavigatorEvent.CREATE_TASK:\n            const task = new NavigatorTask(data.payload);\n            navigatorProcess.createTask(task);\n            break;\n        case NavigatorEvent.CANCEL_TASK:\n            navigatorProcess.cancelTask(data.payload.id);\n            break;\n        case NavigatorEvent.UPDATE_POINTS_COST:\n            navigatorProcess.updatePointsCost(data.payload);\n            break;\n    }\n};\n","/* eslint-disable no-continue */\nimport { equalPositions } from \"@lib/utils\";\nimport { getDirections } from \"./tools\";\nexport class NavigatorProcess {\n    constructor() {\n        this.pointsCost = [];\n        this.taskQueue = [];\n    }\n    createTask(task) {\n        this.taskQueue.push(task);\n    }\n    cancelTask(id) {\n        const taskIndex = this.taskQueue.findIndex((task) => task.id === id);\n        if (taskIndex !== -1) {\n            this.taskQueue.splice(taskIndex, 1);\n        }\n    }\n    updatePointsCost(matrix) {\n        this.pointsCost = matrix;\n    }\n    processing() {\n        while (this.taskQueue.length > 0) {\n            const task = this.taskQueue[0];\n            const currentNode = task.takeLastNode();\n            if (!currentNode) {\n                this.taskQueue.shift();\n                task.failure();\n                continue;\n            }\n            if (equalPositions(task.to, currentNode)) {\n                this.taskQueue.shift();\n                task.complete(currentNode);\n                continue;\n            }\n            currentNode.closeList();\n            getDirections(task.grid, currentNode).forEach((offset) => {\n                task.checkAdjacentNode(currentNode, offset, this.pointsCost);\n            });\n        }\n    }\n}\n"],"names":["module","exports","Heap","defaultCmp","floor","heapify","heappop","heappush","heappushpop","heapreplace","insort","min","nlargest","nsmallest","updateItem","_siftdown","_siftup","Math","x","y","a","lo","hi","cmp","mid","Error","length","splice","apply","concat","array","item","push","lastelt","returnitem","pop","_ref","i","_i","_len","_ref1","_results","_results1","_j","this","reverse","pos","indexOf","n","elem","result","slice","sort","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","nodes","replace","pushpop","prototype","peek","contains","clear","empty","size","clone","heap","toArray","insert","top","front","has","copy","call","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","NavigatorEvent","GameAdType","GameScene","GameEvents","GameSettings","GameDifficulty","GameFlag","equalPositions","b","z","eachEntries","callback","entries","forEach","value","index","getDistance","point1","point2","sqrt","getDirections","grid","currentNode","straightFlags","allowedDirs","R","L","D","U","dir","_a","RD","RU","LU","LD","dontCross","split","every","flag","TUTORIAL","AUDIO","EFFECTS","PathNode","constructor","position","cost","distance","listOpened","bestGuessDistance","getCost","setCost","getParent","setParent","isNewList","isListOpened","openList","closeList","getPath","path","NavigatorTask","id","from","to","compress","tree","nodeA","nodeB","node","addNode","takeLastNode","pickNode","upNode","failure","self","postMessage","event","COMPLETE_TASK","payload","complete","CompressPath","checkAdjacentNode","shift","points","_b","_c","_d","_e","_f","abs","SQRT2","existNode","static","compressed","beg","assign","next","GetDirection","current","prevDir","pow","navigatorProcess","pointsCost","taskQueue","createTask","task","cancelTask","taskIndex","findIndex","updatePointsCost","matrix","processing","offset","setInterval","onmessage","data","CREATE_TASK","CANCEL_TASK","UPDATE_POINTS_COST"],"sourceRoot":""}